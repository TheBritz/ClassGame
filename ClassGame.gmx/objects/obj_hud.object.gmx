<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hud</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(global.hud))
{
  instance_destroy();
}
else
{ 
  global.hud = id;
  
  depth = -1000;
  panel_h_ext = 10;
  
  scr_SetHudDrawMembers();
  playspace_bl = sidepanel_width;
  playspace_br = room_width - sidepanel_width;
  playspace_bu = 200;
  playspace_bd = room_height;
  
  pathspace_bl = sidepanel_width*2;
  pathspace_br = room_width - sidepanel_width*2;
  
  msg_conn_gp = ": Connect Controller";
  msg_press_start = ": Press Start";
  msg_playing = "";
  
  player_colors[0] = c_red;
  player_colors[1] = make_colour_rgb(0, 80, 255);
  player_colors[2] = c_green;
  player_colors[3] = c_yellow;
  
  for(var i = 0; i &lt; array_length_1d(player_colors); i++)
  {
    player_msg[i] = ": Not Set";
  }
  
  draw_set_font(font0);
  
  color_bg_text = make_colour_rgb(15, 15, 40);
  
  powerups_shift_y = 30;
  powerups_shift_x = 60;
}  
  
  
  

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_SetHudDrawMembers();
scr_HudMonitorScore();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var g_c = global.game_controller;
///Draw killcount
if(scr_IsAPlayerRegistered())
{
  draw_set_halign(fa_center);
  draw_set_font(font1);
  var level = g_c.progress_level;
  if(level &gt;= ds_list_size(g_c.kill_count_levels))
  {
    level = ds_list_size(g_c.kill_count_levels) - 1;
  }
  draw_text_transformed_colour(room_width/2, room_height*.01, "Level " + string(level + 1) + " | Kills: " + string(g_c.kill_count) + " / " + string(g_c.kill_count_levels[|level]), 1, 1, 0, c_orange, c_orange, c_orange, c_orange, 1)
}

///Draw sidepanels
var col = make_colour_rgb(40, 40, 45);
draw_set_colour(col);
draw_rectangle(panel_1_x, panel_1_y, panel_1_x + sidepanel_width, panel_1_y + sidepanel_height + panel_h_ext, false);
draw_rectangle(panel_2_x, panel_2_y, panel_2_x + sidepanel_width, panel_2_y + sidepanel_height + panel_h_ext, false);

///Draw Messages
var player_name_base = "obj_player";
var spr_base_name = "spr_player";
var player_index, spr_index, powerups, pup_entry;

for(var i = 0; i &lt; array_length_1d(player_msg_x); i++)
{
  draw_set_valign(fa_middle);
  draw_set_halign(fa_left);
  draw_rectangle_colour(player_msg_x[i] - 5, player_msg_y[i] - 15, player_msg_x[i] + sidepanel_width - 20, player_msg_y[i] + 10, color_bg_text, color_bg_text, color_bg_text, color_bg_text, false);
  draw_rectangle_colour(player_msg_x[i] - 5, player_msg_y[i] - 15, player_msg_x[i] + sidepanel_width - 20, player_msg_y[i] + 10, c_gray, c_gray, c_gray, c_gray, true);
  draw_set_font(font0);
  draw_text_transformed_colour(player_msg_x[i], player_msg_y[i], "P" + string(i + 1) + player_msg[i], 2, 2, 0, player_colors[i], player_colors[i], player_colors[i], player_colors[i], 1); 
  player_index = asset_get_index(player_name_base + string(i + 1));
  
  if(g_c.player_select[i])
  {
    var tri_w = 20;
    var tri_h = 16;
    var tri_disp = 55;
    var x_base_r = player_select_x[i] + tri_disp;
    var x_base_l = player_select_x[i] - tri_disp;
    spr_index = asset_get_index(spr_base_name + string(g_c.player_select_index[i] + 1));
    draw_sprite_ext(spr_index, 0, player_select_x[i], player_select_y[i], 2, 2, 0, player_colors[i], 1);
    draw_triangle_colour(x_base_r, player_select_y[i] - tri_h/2, x_base_r, player_select_y[i] + tri_h/2, x_base_r + tri_w, player_select_y[i], player_colors[i], player_colors[i], player_colors[i], false);
    draw_triangle_colour(x_base_l, player_select_y[i] - tri_h/2, x_base_l, player_select_y[i] + tri_h/2, x_base_l - tri_w, player_select_y[i], player_colors[i], player_colors[i], player_colors[i], false);
    draw_set_font(font1);
    draw_set_valign(fa_middle);
    draw_set_halign(fa_left);
    var margin = 5;
    var button_scale = 2;
    var first_part = "Press";
    var start_x = player_select_x[i] - 55;
    var draw_y = player_select_y[i] + 70;
    draw_text_colour(start_x, draw_y, "Press", c_white, c_white, c_silver, c_silver, 1);
    draw_sprite_ext(spr_a_button, 0, start_x + string_width(first_part) + margin, draw_y, button_scale, button_scale, 0, -1, 1);
    draw_text_colour(start_x + string_width(first_part) + margin*2 + sprite_get_width(spr_a_button)*button_scale, draw_y, "to select", c_white, c_white, c_silver, c_silver, 1);
  }
  
  if(g_c.player_registered[i])
  {
    draw_sprite_ext(g_c.player_sprite[i], 0, player_msg_x[i] + 10, player_msg_y[i] + powerups_shift_y, .5, .5, 0, player_colors[i], 1);
    draw_set_valign(fa_middle);
    draw_set_halign(fa_left);
    draw_set_font(font1);
    draw_text_transformed_colour(player_msg_x[i] + 25, player_msg_y[i] + powerups_shift_y, "x " + string(g_c.player_lives[i]), 1, 1, 0, player_colors[i], player_colors[i], player_colors[i], player_colors[i], 1);
    if(instance_exists(player_index))
    {
      powerups = player_index.powerups;
      for(var ii = 0; ii &lt; ds_list_size(powerups); ii++)
      {
        pup_entry = powerups[|ii];
        draw_sprite(pup_entry[1], 0, powerups_shift_x + player_msg_x[i] + (sprite_get_width(spr_powerup_frame) + 10)*ii, player_msg_y[i] + powerups_shift_y);
      }
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
