<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_starfield</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Create particle types
base_depth = 1000;

active_star_count = 100;

for(var i = 0; i &lt; 3; i++)
{
  part_types[i] = part_type_create();
  part_systems[i] = part_system_create();
}

var star_speeds;
star_speeds[0] = 2;
star_speeds[1] = .5;
star_speeds[2] = .1;

for(var i = 0; i &lt; array_length_1d(part_types); i++)
{
  part_type_sprite(part_types[i], spr_star, true, false, true);
  part_type_direction(part_types[i], 270, 270, 0, 0);
  part_type_alpha1(part_types[i], .75);
  part_type_speed(part_types[i], star_speeds[i] - star_speeds[i]*.2, star_speeds[i] + star_speeds[i]*.2, 0, 0);
  part_type_life(part_types[i], global.hud.playspace_bd/(star_speeds[i]*.2) + 10, global.hud.playspace_bd/star_speeds[i]*.2 + 10);
  part_system_depth(part_systems[i], base_depth + i);  
}

r = make_colour_rgb(255, 200, 200);
g = make_colour_rgb(200, 255, 200);
b = make_colour_rgb(200, 200, 255);

for(var i = 0; i &lt; array_length_1d(part_types); i++)
{
  repeat(active_star_count)
  {
    part_particles_create_colour(part_systems[i], irandom_range(global.hud.playspace_bl, global.hud.playspace_br), irandom(global.hud.playspace_bd), part_types[i], choose(-1, r, g, b), 1);
  }
}

//Get spawn rates and establish spawn timer
for(var i = 0; i &lt; array_length_1d(part_types); i++)
{
  star_spawnrates[i] = active_star_count/global.hud.playspace_bd*star_speeds[i];
  star_spawntimers[i] = 0;
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(var i = 0; i &lt; array_length_1d(star_spawntimers); i++)
{
  star_spawntimers[i] += star_spawnrates[i];
  if(star_spawntimers[i] &gt;= 1)
  {
    part_particles_create_colour(part_systems[i], irandom_range(global.hud.playspace_bl, global.hud.playspace_br), -20, part_types[i], choose(-1, r, g, b), 1);
    star_spawntimers[i] = 0;
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
