<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_game_controller</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.game_controller = id;

kill_count = 0;
kill_count_levels = ds_list_create();
ds_list_add(kill_count_levels, 50, 125, 250, 500);

current_kill_goal = undefined;

progress_level = 0;
difficulty_level = 0;

difficulty_hp_add_mod = .5;
difficulty_hp_mult_mod = .07;

difficulty_shoot_add_mod = 5;
difficulty_shoot_mult_mod = .1;

difficulty_speed_add_mod = .5;
difficulty_speed_mult_mod = .1;

badguy_pool = ds_list_create();
ds_list_add(badguy_pool, obj_badguy1);

powerup_pool = ds_list_create();
ds_list_add(powerup_pool, obj_powerup_spread);

progress_map = ds_map_create();

miniboss_active = false;
miniboss_number = 1;
miniboss_spawns = 0;
miniboss_spawn_kill_count = 30;
miniboss_spawn_kill_count_inc = 10;

powerup_spawn_kill_count = 45;
powerup_spawns = 0;

//Kill Count Checker
alarm[1] = 15;

///Initialize game stuff
scr_InitializeGlobals();

//If hud does not exist, create it
if(!instance_exists(global.hud))
{
  instance_create(0, 0, obj_hud);
}

//Declare gamepad connection 
global.gp_conn = undefined;

var gp_num = gamepad_get_device_count();
for(var i = 0; i &lt; gp_num; i++)
{
  gp_conn[i] = gamepad_is_connected(i);
  gamepad_set_axis_deadzone(i, .2);
  scr_GamepadConnectChange(i, gp_conn[i]);
}

gamepad_ping_time = 5;
alarm[0] = gamepad_ping_time;
spawn_time_range[0] = 1.5*room_speed;
spawn_time_range[1] = 3*room_speed;
spawn_timer = 2*room_speed;

//Player Lives
player_lives[0] = 0;
player_lives[1] = 0;
player_lives[2] = 0;
player_lives[3] = 0;

player_start_lives = 3;

//Player spawn X
var hud = global.hud;
player_spawn_x[0] = hud.playspace_bl + hud.playspace_width/5;
player_spawn_x[1] = hud.playspace_bl + 2*hud.playspace_width/5;
player_spawn_x[2] = hud.playspace_bl + 3*hud.playspace_width/5;
player_spawn_x[2] = hud.playspace_bl + 4*hud.playspace_width/5;

ship_number = 4;
for(var i = 0; i &lt; 4; i++)
{
  player_registered[i] = false;
  player_select[i] = false;
  player_select_index[i] = i;
  player_select_switched[i] = false;  
  player_respawn_timer[i] = - 1;
  player_sprite[i] = asset_get_index("spr_player" + string(i + 1));
}

player_respawn_wait = room_speed*1.5;

//Audio
audio_emitter = audio_emitter_create();
audio_emitter_falloff(audio_emitter, 10000, 10000, 1);
audio_emitter_gain(audio_emitter, .55);

audio_emitter_no_pitch_shift = audio_emitter_create();
audio_emitter_falloff(audio_emitter_no_pitch_shift, 10000, 10000, 1);
audio_emitter_gain(audio_emitter_no_pitch_shift, 1);

path_list_map = scr_BuildBadguyPathListMap(obj_badguy1, obj_badguy2, obj_badguy4);

formation_pool = scr_BuildFormationPool();

taunt_pool = scr_BuildTauntPool();
taunt_pool_active = ds_list_create();
ds_list_copy(taunt_pool_active, taunt_pool);

//Enemy Wave Number
enemy_wave_num_min = 4;
enemy_wave_num_max = 8;
enemy_wave_num_min_inc = 1;
enemy_wave_num_max_inc = 2;

pup_spawn_rate = room_speed * 15;
pup_spawn_rate_inc = room_speed * 5;
alarm[3] = pup_spawn_rate;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(var i = 0; i &lt; 4; i++)
{
  if(player_registered[i])
  {
    scr_PowerupCreate(irandom_range(global.hud.pathspace_bl, global.hud.pathspace_br), -16, scr_ChooseFromList(powerup_pool), i + 1);
  }
}

pup_spawn_rate += pup_spawn_rate_inc;
alarm[3] = pup_spawn_rate;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Miniboss spawn
repeat(miniboss_number)
{
  scr_BadguyCreate(irandom_range(global.hud.pathspace_bl, global.hud.pathspace_br), -16, obj_badguy3);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ping gamepad connection
var gp_num = gamepad_get_device_count();
var old;
for(var i = 0; i &lt; gp_num; i++)
{
  old = gp_conn[i];
  gp_conn[i] = gamepad_is_connected(i);
  if(old != gp_conn[i])
  {
    scr_GamepadConnectChange(i, gp_conn[i]);
  }
}

alarm[0] = gamepad_ping_time;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for Start Press and Ship select
var obj_name_base = "obj_player";
var spr_name_base = "spr_player";
var obj_ind;
for(var i = 0; i &lt; array_length_1d(gp_conn); i++)
{
  if(gp_conn[i] &amp;&amp; gamepad_button_check_pressed(i, gp_start))
  {      
    if(!player_registered[i] &amp;&amp; !player_select[i] &amp;&amp; player_lives[i] &lt;= 0)  
    {
      player_select[i] = true;
      global.hud.player_msg[i] = ": Select Ship";
    }
  }
  
  if(player_select[i])
  {    
    var h_axis = gamepad_axis_value(i, gp_axislh);
    
    if(gamepad_button_check_pressed(i, gp_face1))
    {
      var spr_ind = asset_get_index(spr_name_base + string(player_select_index[i]+1));
      obj_ind = asset_get_index(obj_name_base + string(i+1));
      var ship = instance_create(room_width/2, room_width/2, obj_ind);
      ship.sprite_index = spr_ind;
      player_sprite[i] = spr_ind;
      difficulty_level += global.player_difficulty_up;
      player_lives[i] = player_start_lives;
      player_registered[i] = true;
      player_select[i] = false;
    }
    var sensitivity = .5;
    if(!player_select_switched[i] &amp;&amp; abs(h_axis) &gt; sensitivity)
    {
      player_select_index[i] += sign(h_axis);
      if(player_select_index[i] &gt;= ship_number) player_select_index[i] = 0;
      if(player_select_index[i] &lt; 0) player_select_index[i] = ship_number - 1;
      player_select_switched[i] = true;
    }
    else if(player_select_switched[i] &amp;&amp; abs(h_axis) &lt;= sensitivity)
    {
      player_select_switched[i] = false;
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control enemy wave spawning
if(!instance_exists(obj_badguy_deployer) &amp;&amp; !miniboss_active &amp;&amp; instance_exists(obj_player))
{
  spawn_timer -= 1;
}

if(spawn_timer &lt;= 0)
{
  var badguy = scr_ChooseFromList(badguy_pool);
  var test = path_list_map[?badguy];
  if(! is_real(test))
  {
    test = test + "a";
  }
  var path = path_duplicate(scr_ChooseFromList(path_list_map[?badguy]));
  if(irandom(1) == 0)
  {
    path_mirror(path);
  }
  var formation = scr_ChooseFromList(formation_pool);
  
  scr_BadguyDeployerCreate(irandom_range(global.hud.pathspace_bl, global.hud.pathspace_br), -16, badguy, irandom_range(enemy_wave_num_min + (enemy_wave_num_min_inc * difficulty_level), enemy_wave_num_max + (enemy_wave_num_max_inc * difficulty_level)), room_speed/2, formation, path, 5, true, false);  
  spawn_timer = irandom_range(spawn_time_range[0], spawn_time_range[1]);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control miniboss and powerup spawns

if(kill_count &gt;= (miniboss_spawns + 1)*miniboss_spawn_kill_count &amp;&amp; !miniboss_active)
{
  //Spawn miniboss
  miniboss_spawns++;
  miniboss_spawn_kill_count += miniboss_spawn_kill_count_inc;
  instance_create(0, 0, obj_hud_warning);
  alarm[2] = room_speed*4;
  miniboss_active = true;
}

if(kill_count &gt;= (powerup_spawns + 1)*powerup_spawn_kill_count)
{
  powerup_spawns++;
  for(var i = 0; i &lt; 4; i++)
  {
    if(player_registered[i])
    {
      scr_PowerupCreate(irandom_range(global.hud.pathspace_bl, global.hud.pathspace_br), -16, scr_ChooseFromList(powerup_pool), i + 1);
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control Respawn
for(var i = 0; i &lt; array_length_1d(player_respawn_timer); i++)
{
  player_respawn_timer[i] -= 1;
  
  if(player_respawn_timer[i] == 0)
  {
    var player_index = asset_get_index("obj_player" + string(i + 1));
    var spr_name_base = "spr_player";
    if(!instance_exists(player_index) &amp;&amp; player_lives[i] &gt; 0)
    {
      var ship = instance_create(0, 0, player_index);
      ship.sprite_index = player_sprite[i];
      player_lives[i]--;
    }    
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control Progression
if(progress_level &lt; ds_list_size(kill_count_levels))
{
  if(kill_count &gt;= kill_count_levels[|progress_level])
  {
    scr_IterateProgression(++progress_level);
  }
}
else
{
  ///You win!
  var msg = instance_create(0, 0, obj_hud_warning);
  msg.draw_color = c_yellow;
  msg.text = "You Win!!!";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var test = event_type;
var extra_line = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
